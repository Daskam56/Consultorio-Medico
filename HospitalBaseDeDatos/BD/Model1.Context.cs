//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalBaseDeDatos.BD
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CONSULTORIOEntities1 : DbContext
    {
        public CONSULTORIOEntities1()
            : base("name=CONSULTORIOEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CITA> CITA { get; set; }
        public virtual DbSet<DOCTOR> DOCTOR { get; set; }
        public virtual DbSet<HISTORIAL> HISTORIAL { get; set; }
        public virtual DbSet<Logs> Logs { get; set; }
        public virtual DbSet<paciente> paciente { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<PROXIMAS_CITAS> PROXIMAS_CITAS { get; set; }
        public virtual DbSet<VISTA_DOCTORES> VISTA_DOCTORES { get; set; }
        public virtual DbSet<VISTA_HISTORIAL> VISTA_HISTORIAL { get; set; }
        public virtual DbSet<VISTA_HORARIO> VISTA_HORARIO { get; set; }
        public virtual DbSet<VISTA_PACIENTES> VISTA_PACIENTES { get; set; }
    
        public virtual int AGREGAR_DOCTOR(Nullable<int> clave_doc, string contraseña, string nombre, string apellidop, string apellidom, string especialidad, string email, string telefono)
        {
            var clave_docParameter = clave_doc.HasValue ?
                new ObjectParameter("clave_doc", clave_doc) :
                new ObjectParameter("clave_doc", typeof(int));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("contraseña", contraseña) :
                new ObjectParameter("contraseña", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidopParameter = apellidop != null ?
                new ObjectParameter("apellidop", apellidop) :
                new ObjectParameter("apellidop", typeof(string));
    
            var apellidomParameter = apellidom != null ?
                new ObjectParameter("apellidom", apellidom) :
                new ObjectParameter("apellidom", typeof(string));
    
            var especialidadParameter = especialidad != null ?
                new ObjectParameter("especialidad", especialidad) :
                new ObjectParameter("especialidad", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AGREGAR_DOCTOR", clave_docParameter, contraseñaParameter, nombreParameter, apellidopParameter, apellidomParameter, especialidadParameter, emailParameter, telefonoParameter);
        }
    
        public virtual int AGREGAR_HISTORIAL(Nullable<System.DateTime> fecha, Nullable<int> expediente, string medicamento, string nota)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var expedienteParameter = expediente.HasValue ?
                new ObjectParameter("expediente", expediente) :
                new ObjectParameter("expediente", typeof(int));
    
            var medicamentoParameter = medicamento != null ?
                new ObjectParameter("medicamento", medicamento) :
                new ObjectParameter("medicamento", typeof(string));
    
            var notaParameter = nota != null ?
                new ObjectParameter("nota", nota) :
                new ObjectParameter("nota", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AGREGAR_HISTORIAL", fechaParameter, expedienteParameter, medicamentoParameter, notaParameter);
        }
    
        public virtual int AGREGAR_PACIENTE(string nombre, string apellidop, string apellidom, Nullable<int> clave_doctor, string curp, string sexo, Nullable<System.DateTime> fecha_nacimiento, Nullable<int> expediente, string telefono, string email, string direccion, string alergias, string ciudad)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidopParameter = apellidop != null ?
                new ObjectParameter("apellidop", apellidop) :
                new ObjectParameter("apellidop", typeof(string));
    
            var apellidomParameter = apellidom != null ?
                new ObjectParameter("apellidom", apellidom) :
                new ObjectParameter("apellidom", typeof(string));
    
            var clave_doctorParameter = clave_doctor.HasValue ?
                new ObjectParameter("clave_doctor", clave_doctor) :
                new ObjectParameter("clave_doctor", typeof(int));
    
            var curpParameter = curp != null ?
                new ObjectParameter("curp", curp) :
                new ObjectParameter("curp", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            var fecha_nacimientoParameter = fecha_nacimiento.HasValue ?
                new ObjectParameter("fecha_nacimiento", fecha_nacimiento) :
                new ObjectParameter("fecha_nacimiento", typeof(System.DateTime));
    
            var expedienteParameter = expediente.HasValue ?
                new ObjectParameter("expediente", expediente) :
                new ObjectParameter("expediente", typeof(int));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var alergiasParameter = alergias != null ?
                new ObjectParameter("alergias", alergias) :
                new ObjectParameter("alergias", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AGREGAR_PACIENTE", nombreParameter, apellidopParameter, apellidomParameter, clave_doctorParameter, curpParameter, sexoParameter, fecha_nacimientoParameter, expedienteParameter, telefonoParameter, emailParameter, direccionParameter, alergiasParameter, ciudadParameter);
        }
    
        public virtual ObjectResult<BUSCAR_PACIENTE_Result> BUSCAR_PACIENTE(Nullable<int> expediente)
        {
            var expedienteParameter = expediente.HasValue ?
                new ObjectParameter("expediente", expediente) :
                new ObjectParameter("expediente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BUSCAR_PACIENTE_Result>("BUSCAR_PACIENTE", expedienteParameter);
        }
    
        public virtual int ELIMINAR_CITA(Nullable<int> expediente)
        {
            var expedienteParameter = expediente.HasValue ?
                new ObjectParameter("expediente", expediente) :
                new ObjectParameter("expediente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ELIMINAR_CITA", expedienteParameter);
        }
    
        public virtual int ELIMINAR_DOCTOR(Nullable<int> clave_doc)
        {
            var clave_docParameter = clave_doc.HasValue ?
                new ObjectParameter("clave_doc", clave_doc) :
                new ObjectParameter("clave_doc", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ELIMINAR_DOCTOR", clave_docParameter);
        }
    
        public virtual int ELIMINAR_PACIENTE(Nullable<int> expediente)
        {
            var expedienteParameter = expediente.HasValue ?
                new ObjectParameter("expediente", expediente) :
                new ObjectParameter("expediente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ELIMINAR_PACIENTE", expedienteParameter);
        }
    
        public virtual int GENERAR_CITA(Nullable<System.DateTime> dia, Nullable<System.TimeSpan> hora_inicio, Nullable<System.TimeSpan> hora_termino, Nullable<int> clave_doc, Nullable<int> expediente)
        {
            var diaParameter = dia.HasValue ?
                new ObjectParameter("dia", dia) :
                new ObjectParameter("dia", typeof(System.DateTime));
    
            var hora_inicioParameter = hora_inicio.HasValue ?
                new ObjectParameter("hora_inicio", hora_inicio) :
                new ObjectParameter("hora_inicio", typeof(System.TimeSpan));
    
            var hora_terminoParameter = hora_termino.HasValue ?
                new ObjectParameter("hora_termino", hora_termino) :
                new ObjectParameter("hora_termino", typeof(System.TimeSpan));
    
            var clave_docParameter = clave_doc.HasValue ?
                new ObjectParameter("clave_doc", clave_doc) :
                new ObjectParameter("clave_doc", typeof(int));
    
            var expedienteParameter = expediente.HasValue ?
                new ObjectParameter("expediente", expediente) :
                new ObjectParameter("expediente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GENERAR_CITA", diaParameter, hora_inicioParameter, hora_terminoParameter, clave_docParameter, expedienteParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
